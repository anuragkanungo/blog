{"name":"Blog","tagline":"Equality in Ruby","body":"There are concepts that show up so trivial and transparent that we don't hope to discover covered up \r\nprofundities in them. We don't generally give much thought to equality, for instance. But equality is a rich idea and, as the expressiveness of programming languages increases, it gets critical that programmers comprehend equality and use it meticulously. The growing populairty of object oriented languages has really prompted a debate on what it intends to say that two objects are 'equal'.\r\n\r\nProgramming languages typically provide an equality test of the form x == y that compares the\r\ntwo expressions. Equality is usually defined only for built-in types, leaving the responsibility for comparing user defined types to the programmer. Features like inheritance have raised the question of whether languages should provide default equality tests for all types. We explain the pros and cons of such defaults, and examine the peculiarities that languages ought to give in the context of Ruby.\r\n\r\nRuby equips the programmer with following default equality methods :-\r\n1. ==\r\n2. eql?\r\n3. equal?","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}